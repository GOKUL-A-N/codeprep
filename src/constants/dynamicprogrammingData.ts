
export const dynamicprogrammingData = {
    definition: "Dynamic Programming is mainly an optimization over plain recursion. Wherever we see a recursive solution that has repeated calls for same inputs, we can optimize it using Dynamic Programming. The idea is to simply store the results of subproblems, so that we do not have to re-compute them when needed later. This simple optimization reduces time complexities from exponential to polynomial.For example, if we write simple recursive solution for Fibonacci Numbers, we get exponential time complexity and if we optimize it by storing solutions of subproblems, time complexity reduces to linear.",
    explanation: ["Identify the subproblems. The first step is to identify the subproblems that make up the larger problem. These subproblems should be smaller and easier to solve than the original problem.","Recursively solve the subproblems. The next step is to solve the subproblems recursively. This means that each subproblem is solved by calling the dynamic programming algorithm on itself.","Store the solutions to the subproblems. As the subproblems are solved, their solutions are stored in a table or other data structure. This avoids having to recompute the solutions to the subproblems if they are needed later.","Use the stored solutions to solve the original problem. Once the solutions to all of the subproblems have been stored, they can be used to solve the original problem. This is typically done by combining the solutions to the subproblems in some way."],
    whenToUse: ["When the problem can be broken down into smaller subproblems. Dynamic programming works best when the problem can be broken down into smaller, easier-to-solve subproblems. The subproblems should also have some overlap, so that the solutions to the subproblems can be reused.","When the problem has overlapping subproblems. If the problem has overlapping subproblems, then dynamic programming can be used to avoid recomputing the solutions to the subproblems. This can lead to significant performance improvements.","When the problem is computationally expensive. If the problem is computationally expensive, then dynamic programming can be used to reduce the time it takes to solve the problem. Dynamic programming does this by storing the solutions to the subproblems, so that they can be reused later."],
    question: [
        {
            title: "Climbing Stars Problem",
            id:"70",
            difficulty: "Easy",
            question: "https://leetcode.com/problems/climbing-stairs/",
            answer: "https://walkccc.me/LeetCode/problems/0070/?h=70",
        },
        {
            title: "Ugly Number",
            id:"263",
            difficulty: "Easy",
            question: "https://leetcode.com/problems/ugly-number/",
            answer: "https://walkccc.me/LeetCode/problems/0263/?h=263",
        },
        {
            title: "Minimum Path Problem",
            id:"64",
            difficulty: "Easy",
            question: "https://leetcode.com/problems/minimum-path-sum/",
            answer: "https://walkccc.me/LeetCode/problems/0064/?h=64",
        },
        {
            title: "House Robber ",
            id:"198",
            difficulty: "Easy",
            question: "https://leetcode.com/problems/house-robber/",
            answer: "https://walkccc.me/LeetCode/problems/0198/?h=198",
        },
        {
            title: "Longest Palindromic Subsequence ",
            id:"516",
            difficulty: "Easy",
            question: "https://leetcode.com/problems/longest-palindromic-subsequence/",
            answer: "https://walkccc.me/LeetCode/problems/0516/?h=516",
        },
        {
            title: "Coin Change",
            id:"322",
            difficulty: "Easy",
            question: "https://leetcode.com/problems/coin-change/",
            answer: "https://walkccc.me/LeetCode/problems/0322/?h=322",
        },
        {
            title: "Longest Increasing Subsequence ",
            id:"300",
            difficulty: "Easy",
            question: "https://leetcode.com/problems/longest-increasing-subsequence/",
            answer: "https://walkccc.me/LeetCode/problems/0300/?h=300",
        },
        {
            title: "Unique Paths ",
            id:"62",
            difficulty: "Easy",
            question: "https://leetcode.com/problems/unique-paths/",
            answer: "https://walkccc.me/LeetCode/problems/0062/?h=62",
        },
        {
            title: "Unique Binary Search Trees",
            id:"96",
            difficulty: "Easy",
            question: "https://leetcode.com/problems/unique-binary-search-trees/",
            answer: "https://walkccc.me/LeetCode/problems/0096/?h=96",
        },
        {
            title: "Longest Palindromic Substring",
            id:"5",
            difficulty: "Easy",
            question: "https://leetcode.com/problems/longest-palindromic-substring/",
            answer: "https://walkccc.me/LeetCode/problems/0005/?h=5",
        },
        {
            title: "Edit Distance ",
            id:"72",
            difficulty: "Easy",
            question: "https://leetcode.com/problems/edit-distance/",
            answer: "https://walkccc.me/LeetCode/problems/0072/?h=72",
        },
        {
            title: "Word Break ",
            id:"139",
            difficulty: "Easy",
            question: "https://leetcode.com/problems/word-break/",
            answer: "https://walkccc.me/LeetCode/problems/0139/?h=139",
        },
        {
            title: "Longest Valid Parentheses",
            id:"32",
            difficulty: "Easy",
            question: "https://leetcode.com/problems/longest-valid-parentheses/",
            answer: "https://walkccc.me/LeetCode/problems/0032/?h=32",
        },
        {
            title: "Binary Tree Cameras",
            id:"968",
            difficulty: "Easy",
            question: "https://leetcode.com/problems/binary-tree-cameras/",
            answer: "https://walkccc.me/LeetCode/problems/0968/?h=968",
        },
    ],
}